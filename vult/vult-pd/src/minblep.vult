external minblep(ch:int,i:int) : real @[wave(channels=1,file="minblep.wav")];

fun minblep_play(trigger) {
   mem playing;
   mem index;
   if(Util.edge(trigger)) {
      index = 0;
      playing = true;
   }
   val out = 0.0;
   if(playing) {
      if(index >= minblep_samples()) {
         playing = false;
         index = 0;
      }
      else
         index = index + 16;
      out = if playing then minblep(0, index) else 0.0;
   }
   return out;
}

fun minblep_step(cv:real, reset: bool) {
   mem pre_phase;
   mem active_blep;
   val phase = Phase.process(cv, 0.0);
   val wrap = (pre_phase - phase) > 0.5;
   pre_phase = phase;
   if(wrap || Util.edge(reset)) {
      active_blep = (active_blep + 1) % 4;
   }
   val o0 = minblep_play(active_blep == 0);
   val o1 = minblep_play(active_blep == 1);
   val o2 = minblep_play(active_blep == 2);
   val o3 = minblep_play(active_blep == 3);
   val pulses = o0 - o1 + o2 - o3;
   mem acc = acc * 0.996 + 20.0 * pulses;
   return acc;
}

fun process(cv:real, reset: real){
   val breset = reset > 0.5;
   val out1 = o:minblep_step(cv, breset);
   val out2 = o:minblep_step(cv, breset);
   val out3 = o:minblep_step(cv, breset);
   val out4 = o:minblep_step(cv, breset);
   return (out1+out2+out3+out4)/4.0;
}
and noteOn(note:int,velocity:int,channel:int){ }
and noteOff(note:int,channel:int){ }
and controlChange(control:int,value:int,channel:int){ }
and default(){ }